{
  "version": 3,
  "sources": ["../src/preload.ts"],
  "sourcesContent": ["import { ipcRenderer, contextBridge } from 'electron'\n\ncontextBridge.exposeInMainWorld('vanella', {\n\n    minimize() { ipcRenderer.send(\"minimize\") },\n    maximize() { ipcRenderer.send(\"maximize\") },\n    unmaximize() { ipcRenderer.send(\"unmaximize\") },\n    close() { ipcRenderer.send(\"close\") },\n    toClose() { ipcRenderer.send(\"to-close\") },\n\n    async openFile() {\n        try {\n            ipcRenderer.send('open-file-dialog')\n        } catch (error) {\n            console.error('Error sending open-file-dialog: ', error)\n        }\n    },    \n\n    async saveFile(contentToSave, filePath: string | undefined, thenWillBeNew: boolean = false) {\n        if (!filePath) {\n            try {\n                ipcRenderer.send('save-file-dialog', contentToSave)\n            } catch (error) {\n                console.error('Error sending save-file-dialog: ', error)\n            }\n        } else {\n            ipcRenderer.send('save-file', {\n                filePath,\n                contentToSave,\n                thenWillBeNew\n            })\n        }\n        \n    },\n\n    async saveAsFile(contentToSave) {\n        try {\n            ipcRenderer.send('save-as-file-dialog', contentToSave)\n        } catch (error) {\n            console.error('Error sending save-as-file-dialog: ', error)\n        }\n    },\n\n    async exportHTML(filePath, contentToExport ) {\n        try {\n            ipcRenderer.send('to-generate-html', { filePath, contentToExport })\n        } catch (error) {\n            console.error('Error generating html: ', error)\n        }\n    },\n\n    bindFileManipulation({\n        'to-check-if-be-saved': callbackToCheckIfBeSaved,\n        'file-content': callbackOfFileContent,\n        'file-saved': callbackOfFileSaved,\n        'file-save-error': callbackOfFileSaveError,\n        'generated-directory-tree-view': callbackOfDirectoryTreeView,\n        // TODO...\n    }) {\n\n        ipcRenderer.on('to-check-if-be-saved', (event) => {\n            callbackToCheckIfBeSaved()\n        })\n\n        ipcRenderer.on('open-file-dialog-reply', (event, result) => {\n            if (!result.error && !result.canceled) {\n                const filePath = result.filePaths[0]\n                ipcRenderer.send('open-file', filePath)\n            } else {\n                console.error('Error opening file dialog:', result.error)\n            }\n        })\n\n        ipcRenderer.on('file-content', (event, filePath: string, dirPath:string, fileContent: string) => {\n            callbackOfFileContent(filePath, dirPath, fileContent)\n        })\n\n        ipcRenderer.on('file-saved', (event, filePath: string, dirPath:string) => {\n            callbackOfFileSaved(filePath, dirPath)\n        })\n\n        ipcRenderer.on('save-file-dialog-reply', (event, result) => {\n            if (!result.error && !result.canceled) {\n                callbackOfFileSaved(result.filePath, result.dirPath)\n            } else if (result.canceled) {\n                console.info('File save operation canceled by the user.')\n            } else {\n                callbackOfFileSaveError(result.error)\n            }\n        })\n\n        ipcRenderer.on('save-as-file-dialog-reply', (event, result) => {\n            if (!result.error && !result.canceled) {\n                callbackOfFileSaved(result.filePath)\n            } else if (result.canceled) {\n                console.info('File save as operation canceled by the user.')\n            } else {\n                callbackOfFileSaveError(result.error)\n            }\n        })\n\n        ipcRenderer.on('generated-directory-tree-view', (event, html) => {\n            callbackOfDirectoryTreeView(html)\n        })\n\n    },\n})\n\n\n"],
  "mappings": "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",
  "names": []
}
